export const LOADERS = {
    "ball-8bits": 16,
    "ball-atom": 4,
    "ball-beat": 3,
    "ball-circus": 5,
    "ball-climbing-dot": 4,
    "ball-clip-rotate": 1,
    "ball-clip-rotate-multiple": 2,
    "ball-clip-rotate-pulse": 2,
    "ball-elastic-dots": 5,
    "ball-fall": 3,
    "ball-fussion": 4,
    "ball-grid-beat": 9,
    "ball-grid-pulse": 9,
    "ball-newton-cradle": 4,
    "ball-pulse": 3,
    "ball-pulse-rise": 5,
    "ball-pulse-sync": 3,
    "ball-rotate": 1,
    "ball-running-dots": 5,
    "ball-scale": 1,
    "ball-scale-multiple": 3,
    "ball-scale-pulse": 2,
    "ball-scale-ripple": 1,
    "ball-scale-ripple-multiple": 3,
    "ball-spin": 8,
    "ball-spin-clockwise": 8,
    "ball-spin-clockwise-fade": 8,
    "ball-spin-clockwise-fade-rotating": 8,
    "ball-spin-fade": 8,
    "ball-spin-fade-rotating": 8,
    "ball-spin-rotate": 2,
    "ball-square-clockwise-spin": 8,
    "ball-square-spin": 8,
    "ball-triangle-path": 3,
    "ball-zig-zag": 2,
    "ball-zig-zag-deflect": 2,
    cog: 1,
    "cube-transition": 2,
    fire: 3,
    "line-scale": 5,
    "line-scale-party": 5,
    "line-scale-pulse-out": 5,
    "line-scale-pulse-out-rapid": 5,
    "line-spin-clockwise-fade": 8,
    "line-spin-clockwise-fade-rotating": 8,
    "line-spin-fade": 8,
    "line-spin-fade-rotating": 8,
    pacman: 6,
    "square-jelly-box": 2,
    "square-loader": 1,
    "square-spin": 1,
    timer: 1,
    "triangle-skew-spin": 1,
};
export const DEFAULTS = {
    BD_COLOR: "rgba(51,51,51,0.8)",
    SPINNER_COLOR: "#fff",
    Z_INDEX: 99999,
};
export const PRIMARY_SPINNER = "primary";
export class NgxSpinner {
    constructor(init) {
        Object.assign(this, init);
    }
    static create(init) {
        if (init?.type == null || init.type.length === 0) {
            console.warn(`[ngx-spinner]: Property "type" is missed. Please, provide animation type to <ngx-spinner> component
        and ensure css is added to angular.json file`);
        }
        return new NgxSpinner(init);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIuZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zcGlubmVyL3NyYy9saWIvbmd4LXNwaW5uZXIuZW51bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsWUFBWSxFQUFFLEVBQUU7SUFDaEIsV0FBVyxFQUFFLENBQUM7SUFDZCxXQUFXLEVBQUUsQ0FBQztJQUNkLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLG1CQUFtQixFQUFFLENBQUM7SUFDdEIsa0JBQWtCLEVBQUUsQ0FBQztJQUNyQiwyQkFBMkIsRUFBRSxDQUFDO0lBQzlCLHdCQUF3QixFQUFFLENBQUM7SUFDM0IsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixXQUFXLEVBQUUsQ0FBQztJQUNkLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGdCQUFnQixFQUFFLENBQUM7SUFDbkIsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCLFlBQVksRUFBRSxDQUFDO0lBQ2YsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLG1CQUFtQixFQUFFLENBQUM7SUFDdEIsWUFBWSxFQUFFLENBQUM7SUFDZixxQkFBcUIsRUFBRSxDQUFDO0lBQ3hCLGtCQUFrQixFQUFFLENBQUM7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQztJQUN0Qiw0QkFBNEIsRUFBRSxDQUFDO0lBQy9CLFdBQVcsRUFBRSxDQUFDO0lBQ2QscUJBQXFCLEVBQUUsQ0FBQztJQUN4QiwwQkFBMEIsRUFBRSxDQUFDO0lBQzdCLG1DQUFtQyxFQUFFLENBQUM7SUFDdEMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQix5QkFBeUIsRUFBRSxDQUFDO0lBQzVCLGtCQUFrQixFQUFFLENBQUM7SUFDckIsNEJBQTRCLEVBQUUsQ0FBQztJQUMvQixrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCLG9CQUFvQixFQUFFLENBQUM7SUFDdkIsY0FBYyxFQUFFLENBQUM7SUFDakIsc0JBQXNCLEVBQUUsQ0FBQztJQUN6QixHQUFHLEVBQUUsQ0FBQztJQUNOLGlCQUFpQixFQUFFLENBQUM7SUFDcEIsSUFBSSxFQUFFLENBQUM7SUFDUCxZQUFZLEVBQUUsQ0FBQztJQUNmLGtCQUFrQixFQUFFLENBQUM7SUFDckIsc0JBQXNCLEVBQUUsQ0FBQztJQUN6Qiw0QkFBNEIsRUFBRSxDQUFDO0lBQy9CLDBCQUEwQixFQUFFLENBQUM7SUFDN0IsbUNBQW1DLEVBQUUsQ0FBQztJQUN0QyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLHlCQUF5QixFQUFFLENBQUM7SUFDNUIsTUFBTSxFQUFFLENBQUM7SUFDVCxrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLEtBQUssRUFBRSxDQUFDO0lBQ1Isb0JBQW9CLEVBQUUsQ0FBQztDQUN4QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3RCLFFBQVEsRUFBRSxvQkFBb0I7SUFDOUIsYUFBYSxFQUFFLE1BQU07SUFDckIsT0FBTyxFQUFFLEtBQUs7Q0FDZixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQztBQWV6QyxNQUFNLE9BQU8sVUFBVTtJQWVyQixZQUFZLElBQTBCO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQTBCO1FBQ3RDLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUM7cURBQ2tDLENBQUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IExPQURFUlMgPSB7XG4gIFwiYmFsbC04Yml0c1wiOiAxNixcbiAgXCJiYWxsLWF0b21cIjogNCxcbiAgXCJiYWxsLWJlYXRcIjogMyxcbiAgXCJiYWxsLWNpcmN1c1wiOiA1LFxuICBcImJhbGwtY2xpbWJpbmctZG90XCI6IDQsXG4gIFwiYmFsbC1jbGlwLXJvdGF0ZVwiOiAxLFxuICBcImJhbGwtY2xpcC1yb3RhdGUtbXVsdGlwbGVcIjogMixcbiAgXCJiYWxsLWNsaXAtcm90YXRlLXB1bHNlXCI6IDIsXG4gIFwiYmFsbC1lbGFzdGljLWRvdHNcIjogNSxcbiAgXCJiYWxsLWZhbGxcIjogMyxcbiAgXCJiYWxsLWZ1c3Npb25cIjogNCxcbiAgXCJiYWxsLWdyaWQtYmVhdFwiOiA5LFxuICBcImJhbGwtZ3JpZC1wdWxzZVwiOiA5LFxuICBcImJhbGwtbmV3dG9uLWNyYWRsZVwiOiA0LFxuICBcImJhbGwtcHVsc2VcIjogMyxcbiAgXCJiYWxsLXB1bHNlLXJpc2VcIjogNSxcbiAgXCJiYWxsLXB1bHNlLXN5bmNcIjogMyxcbiAgXCJiYWxsLXJvdGF0ZVwiOiAxLFxuICBcImJhbGwtcnVubmluZy1kb3RzXCI6IDUsXG4gIFwiYmFsbC1zY2FsZVwiOiAxLFxuICBcImJhbGwtc2NhbGUtbXVsdGlwbGVcIjogMyxcbiAgXCJiYWxsLXNjYWxlLXB1bHNlXCI6IDIsXG4gIFwiYmFsbC1zY2FsZS1yaXBwbGVcIjogMSxcbiAgXCJiYWxsLXNjYWxlLXJpcHBsZS1tdWx0aXBsZVwiOiAzLFxuICBcImJhbGwtc3BpblwiOiA4LFxuICBcImJhbGwtc3Bpbi1jbG9ja3dpc2VcIjogOCxcbiAgXCJiYWxsLXNwaW4tY2xvY2t3aXNlLWZhZGVcIjogOCxcbiAgXCJiYWxsLXNwaW4tY2xvY2t3aXNlLWZhZGUtcm90YXRpbmdcIjogOCxcbiAgXCJiYWxsLXNwaW4tZmFkZVwiOiA4LFxuICBcImJhbGwtc3Bpbi1mYWRlLXJvdGF0aW5nXCI6IDgsXG4gIFwiYmFsbC1zcGluLXJvdGF0ZVwiOiAyLFxuICBcImJhbGwtc3F1YXJlLWNsb2Nrd2lzZS1zcGluXCI6IDgsXG4gIFwiYmFsbC1zcXVhcmUtc3BpblwiOiA4LFxuICBcImJhbGwtdHJpYW5nbGUtcGF0aFwiOiAzLFxuICBcImJhbGwtemlnLXphZ1wiOiAyLFxuICBcImJhbGwtemlnLXphZy1kZWZsZWN0XCI6IDIsXG4gIGNvZzogMSxcbiAgXCJjdWJlLXRyYW5zaXRpb25cIjogMixcbiAgZmlyZTogMyxcbiAgXCJsaW5lLXNjYWxlXCI6IDUsXG4gIFwibGluZS1zY2FsZS1wYXJ0eVwiOiA1LFxuICBcImxpbmUtc2NhbGUtcHVsc2Utb3V0XCI6IDUsXG4gIFwibGluZS1zY2FsZS1wdWxzZS1vdXQtcmFwaWRcIjogNSxcbiAgXCJsaW5lLXNwaW4tY2xvY2t3aXNlLWZhZGVcIjogOCxcbiAgXCJsaW5lLXNwaW4tY2xvY2t3aXNlLWZhZGUtcm90YXRpbmdcIjogOCxcbiAgXCJsaW5lLXNwaW4tZmFkZVwiOiA4LFxuICBcImxpbmUtc3Bpbi1mYWRlLXJvdGF0aW5nXCI6IDgsXG4gIHBhY21hbjogNixcbiAgXCJzcXVhcmUtamVsbHktYm94XCI6IDIsXG4gIFwic3F1YXJlLWxvYWRlclwiOiAxLFxuICBcInNxdWFyZS1zcGluXCI6IDEsXG4gIHRpbWVyOiAxLFxuICBcInRyaWFuZ2xlLXNrZXctc3BpblwiOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRTID0ge1xuICBCRF9DT0xPUjogXCJyZ2JhKDUxLDUxLDUxLDAuOClcIixcbiAgU1BJTk5FUl9DT0xPUjogXCIjZmZmXCIsXG4gIFpfSU5ERVg6IDk5OTk5LFxufTtcblxuZXhwb3J0IGNvbnN0IFBSSU1BUllfU1BJTk5FUiA9IFwicHJpbWFyeVwiO1xuXG5leHBvcnQgdHlwZSBTaXplID0gXCJkZWZhdWx0XCIgfCBcInNtYWxsXCIgfCBcIm1lZGl1bVwiIHwgXCJsYXJnZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwaW5uZXIge1xuICBiZENvbG9yPzogc3RyaW5nO1xuICBzaXplPzogU2l6ZTtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIGZ1bGxTY3JlZW4/OiBib29sZWFuO1xuICB6SW5kZXg/OiBudW1iZXI7XG4gIHRlbXBsYXRlPzogc3RyaW5nO1xuICBzaG93U3Bpbm5lcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBOZ3hTcGlubmVyIHtcbiAgbmFtZTogc3RyaW5nO1xuICBiZENvbG9yOiBzdHJpbmc7XG4gIHNpemU6IFNpemU7XG4gIGNvbG9yOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgY2xhc3M6IHN0cmluZztcbiAgZGl2Q291bnQ6IG51bWJlcjtcbiAgZGl2QXJyYXk6IEFycmF5PG51bWJlcj47XG4gIGZ1bGxTY3JlZW46IGJvb2xlYW47XG4gIHNob3c6IGJvb2xlYW47XG4gIHpJbmRleDogbnVtYmVyO1xuICB0ZW1wbGF0ZTogc3RyaW5nO1xuICBzaG93U3Bpbm5lcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihpbml0PzogUGFydGlhbDxOZ3hTcGlubmVyPikge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKGluaXQ/OiBQYXJ0aWFsPE5neFNwaW5uZXI+KTogTmd4U3Bpbm5lciB7XG4gICAgaWYgKGluaXQ/LnR5cGUgPT0gbnVsbCB8fCBpbml0LnR5cGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFtuZ3gtc3Bpbm5lcl06IFByb3BlcnR5IFwidHlwZVwiIGlzIG1pc3NlZC4gUGxlYXNlLCBwcm92aWRlIGFuaW1hdGlvbiB0eXBlIHRvIDxuZ3gtc3Bpbm5lcj4gY29tcG9uZW50XG4gICAgICAgIGFuZCBlbnN1cmUgY3NzIGlzIGFkZGVkIHRvIGFuZ3VsYXIuanNvbiBmaWxlYCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTmd4U3Bpbm5lcihpbml0KTtcbiAgfVxufVxuIl19